#version 450
#extension GL_ARB_separate_shader_objects : enable


layout(local_size_x=1,local_size_y=1,local_size_z=1) in;

layout(std430,binding=0) restrict readonly buffer PrimitiveSetBuffer {
   uint primitiveBuffer[];
};
layout(std430,binding=1) restrict readonly buffer DrawCommandBuffer {
   uint drawCommandBuffer[];
};
layout(std430,binding=2) restrict readonly buffer MatrixListControlBuffer {
   uint matrixListControlBuffer[];
};
layout(std430,binding=3) restrict writeonly buffer DrawIndirectBuffer {
   uint drawIndirectBuffer[];
};
layout(std430,binding=4) restrict buffer StateSetBuffer {
   uint stateSetBuffer[];
};


void main()
{
   // draw command buffer data
   uint drawCommandOffset4=gl_WorkGroupID.x*4;
   uint primitiveOffset4=drawCommandBuffer[drawCommandOffset4+0];
   uint matrixControlOffset4=drawCommandBuffer[drawCommandOffset4+1];
   uint stateSetDataOffset4=drawCommandBuffer[drawCommandOffset4+2];

   // matrix control data
   uint matrixListOffset64=0;//matrixListControlBuffer[matrixControlOffset4+0];
   uint numMatrices=1;//matrixListControlBuffer[matrixControlOffset4+1];

   // compute increment and get indirectBufferOffset
   uint indirectBufferOffset4=atomicAdd(stateSetBuffer[stateSetDataOffset4],5);

   // write indirect buffer data
   drawIndirectBuffer[indirectBufferOffset4]=primitiveBuffer[primitiveOffset4+0]; // indexCount
   indirectBufferOffset4++;
   drawIndirectBuffer[indirectBufferOffset4]=numMatrices; // instanceCount
   indirectBufferOffset4++;
   drawIndirectBuffer[indirectBufferOffset4]=primitiveBuffer[primitiveOffset4+1]; // firstIndex
   indirectBufferOffset4++;
   drawIndirectBuffer[indirectBufferOffset4]=primitiveBuffer[primitiveOffset4+2]; // vertexOffset
   indirectBufferOffset4++;
   drawIndirectBuffer[indirectBufferOffset4]=matrixListOffset64; // base instance
}
