#version 450
#extension GL_EXT_buffer_reference : require
#extension GL_ARB_gpu_shader_int64 : require
#if 0  // debug print; this makes possible to use debugPrintfEXT() in this shader;
       // for more info, see comments around debugPrintEXT() bellow
# extension GL_EXT_debug_printf : require
#endif


layout(local_size_x=1, local_size_y=1, local_size_z=1) in;


layout(buffer_reference, std430, buffer_reference_align=16) buffer PrimitiveSetReference {
   uint count;
   uint first;
   uint vertexOffset;
   uint vertexData;
};

struct DrawableGpuData {
   PrimitiveSetReference primitiveSetReference;
   uint64_t shaderDataAddr;
   uint numInstances;
   uint dummy;
};


layout(std430, binding=0) restrict readonly buffer DrawableBuffer {
   DrawableGpuData drawableBuffer[];  // one buffer for the whole scene
};
layout(std430, binding=1) restrict readonly buffer MatrixListControlBuffer {
   uint matrixListControlBuffer[];
};
layout(std430, binding=2) restrict writeonly buffer DrawIndirectBuffer {
   uint drawIndirectBuffer[];  // one buffer for the whole scene
};
layout(std430, binding=3) restrict writeonly buffer DataPointerBuffer {
   uint64_t dataPointerBuffer[];  // one buffer for the whole scene
};


void main()
{
   // drawable buffer data
   PrimitiveSetReference primitiveSetReference = drawableBuffer[gl_WorkGroupID.x].primitiveSetReference;
   uint64_t shaderDataAddr = drawableBuffer[gl_WorkGroupID.x].shaderDataAddr;
   uint numInstances = drawableBuffer[gl_WorkGroupID.x].numInstances;

   // matrix control data
   //uint matrixListOffset64=0;//matrixListControlBuffer[matrixControlOffset4+0];
   //uint numMatrices=1;//matrixListControlBuffer[matrixControlOffset4+1];

   // write indirect buffer data
   uint indirectBufferOffset4 = gl_WorkGroupID.x*5;
   drawIndirectBuffer[indirectBufferOffset4+0] = primitiveSetReference.count; // indexCount
   drawIndirectBuffer[indirectBufferOffset4+1] = numInstances; // instanceCount
   drawIndirectBuffer[indirectBufferOffset4+2] = primitiveSetReference.first; // firstIndex
   drawIndirectBuffer[indirectBufferOffset4+3] = primitiveSetReference.vertexOffset; // vertexOffset
   drawIndirectBuffer[indirectBufferOffset4+4] = gl_WorkGroupID.x; // base instance
   dataPointerBuffer[gl_WorkGroupID.x] = shaderDataAddr;

#if 0  // debug print; to enable it, you also need to (1) enable GL_EXT_debug_printf extension on the beginning of this shader,
       // you need to (2) enable VK_KHR_shader_non_semantic_info device extension (look for VK_KHR_shader_non_semantic_info
       // text in InitAndFinalize.cpp) and you need to (3) have Vulkan Configurator (vkconfig) running and you need to
       // (4) enable "Debug Printf" in Vulkan Configurator in Shader-Based validation;
       //  you might also need to increase "Printf buffer size"
   debugPrintfEXT("DrawCommand %i, indirect offset %i, indexCount %i, instanceCount %i, firstIndex %i, vertexOffset %i, shaderDataAddr 0x%x.\n",
                  gl_WorkGroupID.x, indirectBufferOffset4, primitiveSetReference.count, numInstances,
                  primitiveSetReference.first, primitiveSetReference.vertexOffset, shaderDataAddr);
#endif
}
